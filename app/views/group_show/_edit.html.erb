<div id="main">
  <%= render "group_show/groupmsglists" %>
  <div class = "textboxbg">
    <div class="textboxeditor">

      <div id="toolbar">
        <button class="ql-bold disable"></button>
        <button class="ql-italic disable"></button>
        <button class="ql-strike disable"></button>
        <button class="ql-link disable"></button>
        <button class="ql-list" value="ordered"></button>
        <button class="ql-list" value="bullet"></button>
        <button class="ql-blockquote"></button>
        <button class="ql-code-block"></button>
        <button id="highlight-text" class="btn-icon disable"><i class="fas fa-laptop-code"></i></button>
      </div>

      <div id="link-dialog" style="display: none;">
        <h3 id= "link-title">Add your link</h3>
        <input type="text" id="link-name" placeholder="Enter link name">
        <input type="text" id="link-url" placeholder="Enter URL">
        <button id="link-cancel">Cancel</button>
        <button id="link-save">Yes</button>
      </div>

      <%= form_for(:session, url: update_groupmsg_path) do |f| %>
        <div class="col-md-10">
          <div id="editor" class="form-control" data-autocomplete-source="<%= @m_channel_users.map { |t| { label: "@" + t["name"] } }.to_json %>"></div>
          <%= f.hidden_field :message, id: "quill-content" %>
          <%= hidden_field_tag :id, params[:id] %>
          <%= hidden_field_tag :action_type, "", id: "gpmsgaction" %>
        </div>
        <div class="col-md-1 mt-10 arrange">
          <%= f.submit "Send", class: "btn btn-primary sendbtn", id: "editgpmsg" %>
          <button class="btn btn-secondary editcancle">Cancle</button>
        </div>
        <%= f.hidden_field :memtion_name, class: "memtion_name" %>
      <% end %>

      <div class="col-md-11">
        <span><i class="fas fa-plus"></i></span>
        <button class="glyphicon glyphicon-font icon togglebtn" id="toggle-toolbar"></button>
      </div>

    </div>
  </div>
<div>
  <%= render "leftpanel/leftpanel" %>
</div>


<script>

  // highlight
  var Inline = Quill.import('blots/inline');

  class HighlightBlot extends Inline {
    static create(value) {
      let node = super.create();
      node.setAttribute('class', 'highlight');
      return node;
    }

    static formats(node) {
      return node.classList.contains('highlight') ? 'highlight' : undefined;
    }
  }

  HighlightBlot.blotName = 'highlight';
  HighlightBlot.tagName = 'span';
  HighlightBlot.className = 'highlight';
  Quill.register(HighlightBlot);

  // call quill
  document.addEventListener("DOMContentLoaded", function() {
    const toolbarOptions = [
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
      ['bold', 'italic', 'strike'],
      ['link'],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      ['blockquote', 'code-block'],
    ];

    const quill = new Quill('#editor', {
      modules: {
        toolbar: {
          container: '#toolbar',
          handlers: {
            link: function() {
              const range = this.quill.getSelection();
              if (range) {
                showLinkDialog(range);
              }
            }
          }
        }
      },
      placeholder: 'Type your message here ...',
      theme: 'snow'
    });

    // highlight start
    var isHighlighting = false;

    function updateButtonText() {
       
      if (isHighlighting) {
        document.querySelector('#highlight-text').classList.add('active');
      } else {
        document.querySelector('#highlight-text').classList.remove('active');
      }
    }

    function toggleHighlight() {
      var format = quill.getFormat();
      if (format.highlight) {
        quill.format('highlight', false);
        isHighlighting = false;
      } else {
        quill.format('highlight', true);
        isHighlighting = true;
      }
      updateButtonText();
      quill.focus();
    }

    quill.on('text-change', function() {
      var format = quill.getFormat();
      isHighlighting = !!format.highlight;
      updateButtonText();
    });

    document.querySelector('#highlight-text').addEventListener('click', function() {
      toggleHighlight();
      var htmlContent = quill.root.innerHTML;
      document.querySelector('#quill-content').value = htmlContent;
    });

    updateButtonText();
    //highlight end   

    // highlight btn status 
    quill.container.firstChild.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        isHighlighting = false;
        updateButtonText();
      }
    });

    // for link dialog 
    var range = quill.getSelection();
    quill.on('selection-change', function(range, oldRange, source) {
      if (range && range.length > 0) {
        var selectedText = quill.getText(range.index, range.length);

        if (selectedText) {
          $('#toolbar').removeClass("hidden");
        }

        $('#link-name').val(selectedText);

      }
    });

    function showLinkDialog(range) {
      document.getElementById('link-dialog').style.display = 'block';
      document.getElementById('link-name').focus();
      document.getElementById('link-save').onclick = function() {
        const linkText = document.getElementById('link-name').value;
        const linkUrl = document.getElementById('link-url').value;
        if (linkText && linkUrl) {
          quill.insertText(range.index, linkText,'link',linkUrl);
          if (range.length > 0) {
            quill.deleteText(range.index + linkText.length, range.length);
          }
          quill.setSelection(range.index + linkText.length, 0);
          hideLinkDialog();
        }
      };

      document.getElementById('link-cancel').onclick = function() {
        hideLinkDialog();
      };
    }

    function hideLinkDialog() {
      document.getElementById('link-dialog').style.display = 'none';
      document.getElementById('link-name').value = '';
      document.getElementById('link-url').value = '';
    }

    // Prevent Quill from losing focus when clicking inside the dialog
    document.getElementById('link-dialog').addEventListener('mousedown', function(event) {
      event.stopPropagation();
    });

    // for toggle toolbar 
    const toolbar = quill.getModule('toolbar');
    const toolbarui = document.getElementById('toolbar');
    const toggleButton = document.getElementById('toggle-toolbar');

    toggleButton.addEventListener('click', function() {
      toolbarui.classList.toggle('hidden');
    });

    var form = document.querySelector('form');
    form.onsubmit = function() {
      var htmlContent = quill.getSemanticHTML();
      var quillContent = document.querySelector('#quill-content');
      htmlContent = htmlContent.replace(/<pre([^>]*)data-language="plain"([^>]*)>([\s\S]*?)<\/pre>/g, function(match, attr1, attr2, content) {
        content = content.trim().replace(/\n/g, '<br>');
        return `<div${attr1}class="ql-code-block"${attr2}>${content}</div>`;
      });
      htmlContent = htmlContent.replace(/<\/blockquote>\s*<blockquote>/g, '<br>');
      htmlContent = htmlContent.replace(/<\/p><p>/g, '<br>').replace(/<\/?p[^>]*>/g, '');
      quillContent.value = htmlContent;
    }

    // for mention select 
    var mention_names = [];
    var mention_users =  <%= raw @mention_users.to_json %>;
    mention_users.forEach(function(user) {
      mention_names.push('@' + user);
    });

    $('.memtion_name').val(JSON.stringify(mention_names))
    $( "#editor" ).autocomplete({
        source: $('#editor').data('autocomplete-source'),
        position: {
          my: "left bottom",
          at: "left top",
      },
      select: function(event, ui) {
        event.preventDefault();
        var range = quill.getSelection();
        range.value = ui.item.value
        mention_names.push(range.value)
        // Check the text before the cursor
        var textBefore = quill.getText(range.index - 1, 1);
        if (textBefore === '@') {
          // Delete the @ before inserting the new text
          quill.deleteText(range.index - 1, 1);
          range.index -= 1;
        }
        quill.insertText(range.index, ui.item.label, "user");
        quill.setSelection(range.index + ui.item.label.length);
        $('.memtion_name').val(JSON.stringify(mention_names));
      }
    });
    
    quill.on('text-change', function(delta, oldDelta, source) {
      if (source === 'user') {
        const range = quill.getSelection();
        if (range) {
          const textBefore = quill.getText(range.index - 1 , 1);
          if (textBefore === '@') {
            // const bounds = quill.getBounds(range.index);
            $("#editor").autocomplete("option", "position", {
              my: "left top",
              at: "left bottom",
              // of: bounds
            });
            $('#editor').val('@').focus().autocomplete('search', '@');
          }
        }
        // Validate the index if it exists in mention_names
        var currentText = quill.getText(0, quill.getLength());
        mention_names.forEach(function(name, index) {
          if (currentText.includes(name)) {
            console.log(`Mention name "${name}" exists in the editor at index ${index}`);
          } else {
            console.log(`Mention name "${name}" does not exist in the editor`);
            mention_names.splice(index, 1);
          }
        });
        // Update the hidden input field with the filtered mention_names
        $('.memtion_name').val(JSON.stringify(mention_names));
      }
    });

    quill.root.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        quill.on('text-change', function(delta, oldDelta, source) {
        if (source === 'user') {
          const range = quill.getSelection();
          if (range) {
            const textBefore = quill.getText(range.index , 1);
            if (textBefore === '@') {
              // const bounds = quill.getBounds(range.index + 1);
              $("#editor").autocomplete("option", "position", {
                my: "left top",
                at: "left bottom",
                // of: bounds
              });
              $('#editor').val('@').focus().autocomplete('search', '@');
            }
          }
          // Validate the index if it exists in mention_names
          var currentText = quill.getText(0, quill.getLength());
          mention_names.forEach(function(name, index) {
            if (currentText.includes(name)) {
              console.log(`Mention name "${name}" exists in the editor at index ${index}`);
            } else {
              console.log(`Mention name "${name}" does not exist in the editor`);
              mention_names.splice(index, 1);
            }
          });
          // Update the hidden input field with the filtered mention_names
          $('.memtion_name').val(JSON.stringify(mention_names));
          }
        });
      }
    });

    // validate btn
    var sendbtn = document.querySelector(".sendbtn");
    sendbtn.disabled = true;
    quill.on('text-change', function(delta, oldDelta, source) {
      const editorContent = quill.getText().trim();
      if (editorContent.length > 0) {
        sendbtn.disabled = false;
      } else {
        sendbtn.disabled = true;
      }
    });

    // take value in text box
    var data = '<%= j @data %>'
    quill.clipboard.dangerouslyPasteHTML(data);
    var length = quill.getLength();
    quill.setSelection(length, length);

    // cancle btn 
    document.querySelector('.editcancle').addEventListener('click', function() {
      document.querySelector('#gpmsgaction').value = 'cancel';
    });

    document.querySelector('#editgpmsg').addEventListener('click', function() {
      document.querySelector('#gpmsgaction').value = 'send';
    });

  });

</script>
