<div id="main">
  <div>
    <div class="title">
      <h2 class="style1"><%= @s_user["name"] %> </h2>
    </div>
    <hr>
    <p class="style21">1</p>
    <p class="style22"><strong><%= @sender_name %></strong></p>
    <p class="style23"><%= (@t_direct_message["created_at"].to_time + 9.hours).strftime("%F/%I:%M%p") %></p>
    <div class="style3" style="word-wrap: break-word; width: 550px"> <%= render_html(@t_direct_message["directmsg"]) %></div>
  </div>
  <hr>
  <div class="txtmsg">
    <% @count = 0 %>
    <h2 class="style1">Reply</h2>
    <hr>
    <% @t_direct_threads.each do |t_direct_thread| %>
      <p class="style21"><%= @count += 1 %></p>
      <p class="style22"><strong><%= t_direct_thread["name"] %></strong></p>
      <p class="style23"><%= (t_direct_thread["created_at"].to_time + 9.hours).strftime("%F/%I:%M%p") %></p>
      <p class="style24"></p>
      <% if session[:m_user] == t_direct_thread["name"] %>
        <p class="style22">
					<%= link_to "", edit_directthreadmsg_path(id: t_direct_thread["id"]), class: "far fa-edit", id: "editbtn" %>
        </p>
      <% end %>
      <% if @t_direct_star_thread_msgids.include? t_direct_thread["id"] %>
        <%= link_to "", unstarthread_path(:id => t_direct_thread["id"]), class: "fas fa-star" %></li>
      <% else %>
        <%= link_to "", starthread_path(:id => t_direct_thread["id"]), class: "far fa-star" %></li>
      <% end %>
      <%= link_to "", delete_directthread_path(:id => t_direct_thread["id"]), class: "glyphicon glyphicon-trash" %>
      <div class="style3" style="word-wrap: break-word; width: 550px"> <%= render_html(t_direct_thread["directthreadmsg"]) %></div>
    <% end %>
  </div>
</div>

<div class = "textboxbg">
  <div class="textboxeditor">
    <div id="toolbar">
      <button class="ql-bold disable"></button>
      <button class="ql-italic disable"></button>
      <button class="ql-strike disable"></button>
      <button class="ql-link disable"></button>
      <button class="ql-list" value="ordered"></button>
      <button class="ql-list" value="bullet"></button>
      <button class="ql-blockquote"></button>
      <button class="ql-code-block"></button>
      <button id="highlight-text" class="btn-icon disable"><i class="fas fa-laptop-code"></i></button>
    </div>
    <div id="link-dialog" style="display: none;">
      <h3 id= "link-title">Add your link</h3>
      <input type="text" id="link-name" placeholder="Enter link name">
      <input type="text" id="link-url" placeholder="Enter URL">
      <button id="link-cancel">Cancel</button>
      <button id="link-save">Yes</button>
    </div>

    <%= form_for(:session, url: update_directthreadmsg_path) do |f| %>
      <div class="col-md-10">
        <div id="editor"></div>
        <%= f.hidden_field :message, id: "quill-content" %>
				<%= hidden_field_tag :id, params[:id] %>
        <%= hidden_field_tag :action_type, "", id: "threadaction" %>
      </div>
      <div class="col-md-1 mt-10 arrange">
        <%= f.submit "Send", class: "btn btn-primary sendbtn", id: "editthread" %>
				<button class="btn btn-secondary editcancle">Cancle</button>
      </div>
    <% end %>

    <div class="col-md-11">
      <span><i class="fas fa-plus"></i></span>
      <button class="glyphicon glyphicon-font icon togglebtn" id="toggle-toolbar"></button>
    </div>
  </div>
</div>
<div>
  <%= render "leftpanel/leftpanel" %>
</div>

<script>

  window.scrollTo(0,document.body.scrollHeight);
  // highlight
  var Inline = Quill.import('blots/inline');
  class HighlightBlot extends Inline {
    static create(value) {
      let node = super.create();
      node.setAttribute('class', 'highlight');
      return node;
    }

    static formats(node) {
      return node.classList.contains('highlight') ? 'highlight' : undefined;
    }
  }
  HighlightBlot.blotName = 'highlight';
  HighlightBlot.tagName = 'span';
  HighlightBlot.className = 'highlight';
  Quill.register(HighlightBlot);

  //call quill
  document.addEventListener("DOMContentLoaded", function() {
    const toolbarOptions = [
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
      ['bold', 'italic', 'strike'],
      ['link'],
      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      ['blockquote','code-block'],
    ];
  
    const quill = new Quill('#editor', {
      modules: {
        toolbar: {
          container: '#toolbar',
          handlers: {
            link: function() {
              const range = this.quill.getSelection();
              if (range) {
                showLinkDialog(range);
              }
            }
          }
        }
      },
      placeholder: 'Type your message here ...',
      theme: 'snow'
    });

    // highlight start
    var isHighlighting = false;
    function updateButtonText() {
      if (isHighlighting) {
        document.querySelector('#highlight-text').classList.add('active');
      } else {
        document.querySelector('#highlight-text').classList.remove('active');
      }
    }

    function toggleHighlight() {
      var format = quill.getFormat();
      if (format.highlight) {
        quill.format('highlight', false);
        isHighlighting = false;
      } else {
        quill.format('highlight', true);
        isHighlighting = true;
      }
      updateButtonText();
      quill.focus();
    }

    quill.on('text-change', function() {
      var format = quill.getFormat();
      isHighlighting = !!format.highlight;
      updateButtonText();
    });

    document.querySelector('#highlight-text').addEventListener('click', function() {
        toggleHighlight();
      var htmlContent = quill.root.innerHTML;
      document.querySelector('#quill-content').value = htmlContent;
    });
    updateButtonText();
    // highlight end 

    // highlight btn status 
    quill.container.firstChild.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        isHighlighting = false;
        updateButtonText();
      }
    });

    // for link dialog 
    var range = quill.getSelection();
    quill.on('selection-change', function(range, oldRange, source) {
      if (range && range.length > 0) {
        var selectedText = quill.getText(range.index, range.length);
        if (selectedText) {
          $('#toolbar').removeClass("hidden");
        }
        $('#link-name').val(selectedText);
      }
    });

    function showLinkDialog(range) {
      document.getElementById('link-dialog').style.display = 'block';
      document.getElementById('link-name').focus();
      document.getElementById('link-save').onclick = function() {
        const linkText = document.getElementById('link-name').value;
        const linkUrl = document.getElementById('link-url').value;
        if (linkText && linkUrl) {
          quill.insertText(range.index, linkText,'link',linkUrl);
          if (range.length > 0) {
            quill.deleteText(range.index + linkText.length, range.length);
          }
          quill.setSelection(range.index + linkText.length, 0);
          hideLinkDialog();
        }
      };
      document.getElementById('link-cancel').onclick = function() {
        hideLinkDialog();
      };
    }

    function hideLinkDialog() {
      document.getElementById('link-dialog').style.display = 'none';
      document.getElementById('link-name').value = '';
      document.getElementById('link-url').value = '';
    }

    // Prevent Quill from losing focus when clicking inside the dialog
    document.getElementById('link-dialog').addEventListener('mousedown', function(event) {
      event.stopPropagation();
    });

    // for toggle toolbar 
    const toolbar = quill.getModule('toolbar');
    const toolbarui = document.getElementById('toolbar');
    const toggleButton = document.getElementById('toggle-toolbar');

    toggleButton.addEventListener('click', function() {
      toolbarui.classList.toggle('hidden');
    });

    var form = document.querySelector('form');
    form.onsubmit = function() {
      var htmlContent = quill.getSemanticHTML();
      var quillContent = document.querySelector('#quill-content');
      htmlContent = htmlContent.replace(/<pre([^>]*)data-language="plain"([^>]*)>([\s\S]*?)<\/pre>/g, function(match, attr1, attr2, content) {
        content = content.trim().replace(/\n/g, '<br>');
        return `<div${attr1}class="ql-code-block"${attr2}>${content}</div>`;
      });
      htmlContent = htmlContent.replace(/<\/blockquote>\s*<blockquote>/g, '<br>');
      htmlContent = htmlContent.replace(/<\/p><p>/g, '<br>').replace(/<\/?p[^>]*>/g, '');
      quillContent.value = htmlContent;
    }

    // validate btn
    var sendbtn = document.querySelector(".sendbtn");
    sendbtn.disabled = true;
    quill.on('text-change', function(delta, oldDelta, source) {
      const editorContent = quill.getText().trim();
      if (editorContent.length > 0) {
        sendbtn.disabled = false;
      } else {
        sendbtn.disabled = true;
      }
    });

    // take value in text box
    var data = '<%= j @data %>'
    quill.clipboard.dangerouslyPasteHTML(data);
    var length = quill.getLength();
    quill.setSelection(length, length);

    // cancle btn 
    document.querySelector('.editcancle').addEventListener('click', function() {
      document.querySelector('#threadaction').value = 'cancel';
    });

    document.querySelector('#editthread').addEventListener('click', function() {
      document.querySelector('#threadaction').value = 'send';
    });

  });

</script>
